// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Progetto_S18_L5.Data;

#nullable disable

namespace Progetto_S18_L5.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250322010543_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Progetto_S18_L5.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8d64359a-fda6-4096-b40d-f1375775244d",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "25b30e78-3e7c-49cd-b682-19c58159e3f1",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "849b8726-44b3-434b-9b18-48a4e8d4e9dd",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        });
                });

            modelBuilder.Entity("Progetto_S18_L5.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "55e83e62-2057-45b0-82fe-33a4cba69a2e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eb822e08-19d1-445f-b0b2-1ddf4c729ebe",
                            Email = "admin@example.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPTjFiaYaGtq8tsslxnhffNqhCeoVvpygVnS8vRbrx/pI2O2Nb7Q75iDvT4ZIQWV4g==",
                            PhoneNumber = "0000000000",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "caf5b9b1-a6a5-40f7-b53f-e07b7f3a0854",
                            TwoFactorEnabled = false,
                            UserName = "admin@example.com"
                        },
                        new
                        {
                            Id = "7f11db70-49f5-4c66-bad3-51085c2bd27a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bb9ae3b0-c197-40ed-bcbf-b590a4204f27",
                            Email = "mario.mario@examople.com",
                            EmailConfirmed = false,
                            FirstName = "Mario",
                            LastName = "Mario",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARIO.MARIO@EXAMPLE.COM",
                            NormalizedUserName = "MARIO.MARIO@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKaVk2PilFpBF+5mhGmCiGOtIF+qHjjpf0Z4ukKkpAnff1/s2WJ/UiFQh4aZ9iP2YQ==",
                            PhoneNumber = "1111111111",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "db086caa-ecc2-4f36-930e-825194263b52",
                            TwoFactorEnabled = false,
                            UserName = "mario.mario@example.com"
                        },
                        new
                        {
                            Id = "766609fc-a1bd-4ca8-bc3b-8167dd9ba0f2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d43df5a4-dc0b-4725-9ab2-c165b8e5ec9e",
                            Email = "luigi.mario@example.com",
                            EmailConfirmed = false,
                            FirstName = "Luigi",
                            LastName = "Mario",
                            LockoutEnabled = false,
                            NormalizedEmail = "LUIGI.MARIO@EXAMPLE.COM",
                            NormalizedUserName = "LUIGI.MARIO@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHyzjydlPHBKYr6FC7KflthqGK/GbH+NZI8pY+a4rzNrqB7yy7z2HO+fuvlBfxjk5w==",
                            PhoneNumber = "2222222222",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9ff7ba88-3085-4748-a2c0-63469447bf6f",
                            TwoFactorEnabled = false,
                            UserName = "luigi.mario@example.com"
                        });
                });

            modelBuilder.Entity("Progetto_S18_L5.Models.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserRoleId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "55e83e62-2057-45b0-82fe-33a4cba69a2e",
                            RoleId = "8d64359a-fda6-4096-b40d-f1375775244d",
                            UserRoleId = "ffaec466-8d00-4538-9d77-3c9b13c01178"
                        },
                        new
                        {
                            UserId = "7f11db70-49f5-4c66-bad3-51085c2bd27a",
                            RoleId = "849b8726-44b3-434b-9b18-48a4e8d4e9dd",
                            UserRoleId = "4ac90c70-f29d-4af0-a914-f7235c851ad4"
                        },
                        new
                        {
                            UserId = "766609fc-a1bd-4ca8-bc3b-8167dd9ba0f2",
                            RoleId = "25b30e78-3e7c-49cd-b682-19c58159e3f1",
                            UserRoleId = "499bc9f4-93e0-445a-9d20-352521f46992"
                        });
                });

            modelBuilder.Entity("Progetto_S18_L5.Models.Reservation", b =>
                {
                    b.Property<Guid>("ReservationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CheckIn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("datetime2");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("ReservationId");

                    b.HasIndex("ClientId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RoomId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Progetto_S18_L5.Models.Room", b =>
                {
                    b.Property<Guid>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoomTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoomId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            RoomId = new Guid("b599f97b-2c0e-4817-b3d8-f6dd81ea46ad"),
                            IsAvailable = true,
                            Price = 60m,
                            RoomNumber = "11",
                            RoomTypeId = new Guid("6c5b01f7-d730-437c-a712-92e4c706cebe")
                        },
                        new
                        {
                            RoomId = new Guid("e44cb2e9-45e8-439b-b492-8d3afe124f46"),
                            IsAvailable = true,
                            Price = 65m,
                            RoomNumber = "12",
                            RoomTypeId = new Guid("6c5b01f7-d730-437c-a712-92e4c706cebe")
                        },
                        new
                        {
                            RoomId = new Guid("6e0d4dad-5363-4beb-97b6-78b7113741d9"),
                            IsAvailable = true,
                            Price = 80m,
                            RoomNumber = "13",
                            RoomTypeId = new Guid("759b2d69-57a9-4284-9850-b771ab1b662c")
                        },
                        new
                        {
                            RoomId = new Guid("3cbaf41b-b7d6-4812-8579-3851a6960770"),
                            IsAvailable = true,
                            Price = 83m,
                            RoomNumber = "14",
                            RoomTypeId = new Guid("759b2d69-57a9-4284-9850-b771ab1b662c")
                        },
                        new
                        {
                            RoomId = new Guid("462a9f3b-d36a-477d-93d3-ccb0aadc42dd"),
                            IsAvailable = true,
                            Price = 100m,
                            RoomNumber = "15",
                            RoomTypeId = new Guid("336d4f29-603c-4962-b81a-a11e994136fa")
                        });
                });

            modelBuilder.Entity("Progetto_S18_L5.Models.RoomType", b =>
                {
                    b.Property<Guid>("RoomTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxOccupancy")
                        .HasColumnType("int");

                    b.Property<string>("RoomTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoomTypeId");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            RoomTypeId = new Guid("6c5b01f7-d730-437c-a712-92e4c706cebe"),
                            MaxOccupancy = 2,
                            RoomTypeName = "Twin room"
                        },
                        new
                        {
                            RoomTypeId = new Guid("759b2d69-57a9-4284-9850-b771ab1b662c"),
                            MaxOccupancy = 3,
                            RoomTypeName = "Three-bed room"
                        },
                        new
                        {
                            RoomTypeId = new Guid("336d4f29-603c-4962-b81a-a11e994136fa"),
                            MaxOccupancy = 4,
                            RoomTypeName = "Four-bed room"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Progetto_S18_L5.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Progetto_S18_L5.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Progetto_S18_L5.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Progetto_S18_L5.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Progetto_S18_L5.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("Progetto_S18_L5.Models.ApplicationRole", "Role")
                        .WithMany("ApplicationUserRole")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Progetto_S18_L5.Models.ApplicationUser", "User")
                        .WithMany("ApplicationUserRole")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Progetto_S18_L5.Models.Reservation", b =>
                {
                    b.HasOne("Progetto_S18_L5.Models.ApplicationUser", "Client")
                        .WithMany("Reservations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Progetto_S18_L5.Models.ApplicationUser", "Employee")
                        .WithMany("OperatorReservations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Progetto_S18_L5.Models.Room", "Room")
                        .WithMany("Reservations")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Employee");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Progetto_S18_L5.Models.Room", b =>
                {
                    b.HasOne("Progetto_S18_L5.Models.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("Progetto_S18_L5.Models.ApplicationRole", b =>
                {
                    b.Navigation("ApplicationUserRole");
                });

            modelBuilder.Entity("Progetto_S18_L5.Models.ApplicationUser", b =>
                {
                    b.Navigation("ApplicationUserRole");

                    b.Navigation("OperatorReservations");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Progetto_S18_L5.Models.Room", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Progetto_S18_L5.Models.RoomType", b =>
                {
                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
